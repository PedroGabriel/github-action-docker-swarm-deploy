name: 'docker-swarm-deploy-github-action'
description: 'Deploy your Docker Swarm apps in seconds. ðŸš€'
inputs:
  docker_compose_file_path:
    description: 'Set your docker compose file path with the CLI options.'
    default: '-c docker-compose.yml -c docker-compose.prod.yml'
    required: false
  md5_file_path:
    description: 'Set the path to the file you would like to get the MD5 checksum for.'
    default: ''
    required: false
  md5_variable_name:
    description: 'Set the name of the variable to store the MD5 checksum in.'
    default: 'MD5_CHECKSUM'
    required: false
  stack_name:
    description: 'The name of your Docker stack.'
    required: true
  ssh_deploy_private_key:
    description: 'The private key you have authenticated to connect to your server via SSH.'
    required: true
  ssh_remote_known_hosts:
    description: 'The public key of your SSH server to validate we are connecting to the right server.'
    default: ''
    required: false
  ssh_deploy_user:
    description: 'The user that you would like to connect as on the remote server via SSH.'
    default: 'deploy'
    required: true
  ssh_remote_hostname:
    description: 'The hostname or IP address of the server you want to connect to.'
    required: true
  ssh_remote_port:
    description: 'The SSH port of the remote server you would like to connect to.'
    default: '22'
    required: false
  registry:
    description: 'Comma-separated list of container registries to authenticate with (e.g., "docker.io,ghcr.io").'
    default: 'docker.io' # Default to Docker Hub if not specified
    required: false
  registry-username:
    description: 'The username to use to authenticate with the container registry.'
    required: true
  registry-token:
    description: 'The token or password to use to authenticate with the container registry.'
    required: true
  log_level:
    description: 'The log level to use for the Docker CLI.'
    default: 'debug'

runs:
  using: 'composite'
  steps:

    - name: Checkout
      uses: actions/checkout@v4


     
    - name: Set MD5 checksum (if provided)
      if: ${{ inputs.md5_file_path }}
      run: |
        echo "${{ inputs.md5_variable_name }}=$(md5sum ${{ inputs.md5_file_path }} | awk '{ print $1 }')" >> $GITHUB_ENV
      shell: bash

    - name: Prepare SSH configuration.
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
      shell: bash

    - name: Add SSH key.
      run: |
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        echo "${{ inputs.ssh_deploy_private_key }}" | tr -d '\r' | ssh-add -
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      shell: bash

    - name: Use predefined SSH known hosts (if available).
      if: ${{ inputs.ssh_remote_known_hosts }}
      run: |
        echo "${{ inputs.ssh_remote_known_hosts }}" >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
      shell: bash

    - name: Use SSH keyscan to get the public key of the remote server.
      if: ${{ inputs.ssh_remote_known_hosts }} = ''
      run: |
        echo "::warning::You may want to set ssh_remote_known_hosts as a GitHub Actions secret to improve security."
        ssh-keyscan -p ${{ inputs.ssh_remote_port }} -H ${{ inputs.ssh_remote_hostname }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
      shell: bash

    - name: Login to registry. (${{ inputs.registry }})
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-token }}
        registry: ${{ inputs.registry }}

    - name: Check if .env file exists
      id: check_env
      shell: bash
      run: |
        if [ -f .env ]; then
          echo "env_exists=true" >> $GITHUB_OUTPUT
          echo ".env file exists"
        else
          echo "env_exists=false" >> $GITHUB_OUTPUT
          echo ".env file does not exist"
        fi

    - name: Export .env to GITHUB_ENV
      if: steps.check_env.outputs.env_exists == 'true'
      shell: bash
      run: |
        echo "Starting .env export"
        while IFS= read -r line || [[ -n "$line" ]]; do
          if [[ $line != \#* ]] && [[ $line != '' ]]; then
            echo "Exporting: $line"
            echo "$line" >> $GITHUB_ENV
          fi
        done < .env
        echo "Finished .env export"

    - name: Debug - Print Environment Variables
      shell: bash
      run: |
        echo "Printing all environment variables:"
        env

    - name: Run Docker Stack deployment via SSH.
      run: |
        docker --log-level ${{ inputs.log_level }} -H ssh://${{ inputs.ssh_deploy_user }}@${{ inputs.ssh_remote_hostname }}:${{ inputs.ssh_remote_port }} \
          stack deploy --detach=false --with-registry-auth \
          ${{ inputs.docker_compose_file_path }} \
          ${{ inputs.stack_name }} \
          --prune
      shell: bash
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock

branding:
  icon: 'zap'
  color: 'blue'
