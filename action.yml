name: 'docker-swarm-deploy-github-action'
description: 'Deploy your Docker Swarm apps in seconds. ðŸš€'
inputs:
  deployment_ssh_private_key:
    description: 'The private key you have authenticated to connect to your server via SSH.'
    required: true
  remote_ssh_known_hosts:
    description: 'The public key of your SSH server to validate we are connecting to the right server.'
    required: true
  remote_ssh_deployment_user:
    description: 'The user that you would like to connect as on the remote server via SSH.'
    required: true
  remote_ssh_server:
    description: 'The hostname or IP address of the server you want to connect to.'
    required: true
  remote_ssh_port:
    description: 'The SSH port of the remote server you would like to connect to.'
    default: '22'
    required: false
  docker_compose_file_path:
    description: 'Set your docker compose file path with the CLI options.'
    default: '-c docker-compose.yml -c docker-compose.prod.yml'
    required: false
runs:
  using: 'composite'
  steps:

    - name: Add SSH key
      run: |
        eval $(ssh-agent -s)
        echo "${{ inputs.deployment_ssh_private_key }}" | tr -d '\r' | ssh-add -
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "${{ inputs.remote_ssh_known_hosts }}" >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      shell: bash
      
    - name: Set the current time to the "NOW" variable
      run: NOW=$(date +%s)
      shell: bash

    - name: Run the Docker Swarm deployment
      run: |
        docker --log-level debug -H ssh://${{ inputs.remote_ssh_deployment_user }}@${{ inputs.remote_ssh_server }}:${{ inputs.remote_ssh_port }} \
          stack deploy --with-registry-auth \
          ${{ inputs.docker_compose_file_path }} \
          ${GITHUB_REPOSITORY#*/} --prune
      shell: bash
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock

branding:
  icon: 'zap'
  color: 'blue'
